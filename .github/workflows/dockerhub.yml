name: Build image and push to docker hub

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: repository checkout
        uses: actions/checkout@v2
  
      - name: docker hub login
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DH_USERNAME}}
          password: ${{secrets.DH_PASSWORD}}

      - name: main_library image build and push
        run: |
          docker build -t milenaj/mainlib:latest ./lab12/main-library
          docker push milenaj/mainlib:latest
    
      - name: city_library imate build and push
        run: |
          docker build -t milenaj/citylib:latest ./lab12/city-library
          docker push milenaj/citylib:latest
          
  deploy-to-minikube:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube

      - name: Deploy Go app to Minikube
        run: |
          ./lab12/minikube/run_copy.sh
          chmod +x ./lab12/minikube/run_copy.sh
      - name: Check NodePort Status
        run: |
          NODE_PORT=$(kubectl get service cityservice -o jsonpath='{.spec.ports[0].nodePort}')
          NODE_IP=$(minikube ip)
          echo "Service is expected to run at http://$NODE_IP:$NODE_PORT"
        
          # Check if the NodePort is accessible
          STATUS_CODE=$(curl -o /dev/null -s -w "%{http_code}" http://$NODE_IP:$NODE_PORT)
          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "Error: Service is not responding on NodePort http://$NODE_IP:$NODE_PORT"
            exit 1
          fi
          echo "Success: Service is responding on NodePort http://$NODE_IP:$NODE_PORT"
      - uses: LuisBoto/ngrok-tunnel-action@v0.1.7.2
        with:
          timeout: 1h
          port: 30001
          ngrok_authtoken: ${{ secrets.NGROK_AUTHTOKEN }}
          save_url_to_filename: tunnelURL.md           
      - name: Upload tunnelURL.md
        uses: actions/upload-artifact@v3
        with:
          name: Ngrok-Tunnel-URL
          path: tunnelURL.md